from __future__ import annotations

import re
from dataclasses import dataclass
from typing import Iterable, List, Optional, Sequence

WORD_RE = re.compile(r"[\w']+", re.UNICODE)

INFORMAL_PRONOUNS = {
    "—Ç—ã",
    "—Ç–µ–±—è",
    "—Ç–µ–±–µ",
    "—Ç–æ–±–æ–π",
    "—Ç–æ–±–æ—é",
    "—Ç–≤–æ–π",
    "—Ç–≤–æ—è",
    "—Ç–≤–æ–∏",
    "—Ç–≤–æ—ë",
    "—Ç–≤–æ—é",
    "—Ç–≤–æ–∏—Ö",
    "—Ç–µ–±–µ",
}

FORMAL_PRONOUNS = {
    "–≤—ã",
    "–≤–∞—à",
    "–≤–∞—à–∞",
    "–≤–∞—à–∏",
    "–≤–∞—à–µ",
    "–≤–∞—Å",
    "–≤–∞–º",
    "–≤–∞–º–∏",
}

TEASING_PATTERNS = (
    re.compile(r"\b–∞—Ö–∞+h?\b"),
    re.compile(r"\b—Ö–∞—Ö–∞+\b"),
    re.compile(r"\b–ª–æ–ª\b"),
    re.compile(r"\b–ø—Ä–∏–∫–∞–ª—ã–≤–∞"),
    re.compile(r"\b–ø–æ–¥–∫–∞–ª—ã–≤–∞"),
    re.compile(r"\b–Ω–∞—Å–º–µ—à"),
    re.compile(r"[üòÇüòÖüòúüòâü•≥ü§™]"),
)


@dataclass(slots=True)
class InteractionSignals:
    informal: bool
    formal: bool
    teasing: bool

    def has_any(self) -> bool:
        return self.informal or self.formal or self.teasing


@dataclass(slots=True)
class RelationshipStats:
    total: int
    informal: int
    formal: int
    teasing: int
    samples: List[str]


def evaluate_interaction(text: str) -> InteractionSignals:
    lowered = text.lower()
    tokens = set(WORD_RE.findall(lowered))

    informal = any(token in INFORMAL_PRONOUNS for token in tokens)
    formal = any(token in FORMAL_PRONOUNS for token in tokens)
    teasing = any(pattern.search(lowered) for pattern in TEASING_PATTERNS)

    return InteractionSignals(informal=informal, formal=formal, teasing=teasing)


def build_relationship_hint(
    addressee_name: str, stats: RelationshipStats, min_samples: int = 3
) -> Optional[str]:
    if stats.total < min_samples:
        return None

    fragments: List[str] = []

    informal_ratio = stats.informal / stats.total if stats.total else 0.0
    formal_ratio = stats.formal / stats.total if stats.total else 0.0
    teasing_ratio = stats.teasing / stats.total if stats.total else 0.0

    if informal_ratio >= 0.4 and informal_ratio > formal_ratio:
        fragments.append("–æ–±—â–∞–µ—Ç—Å—è –Ω–∞ '—Ç—ã'")
    elif formal_ratio >= 0.4 and formal_ratio > informal_ratio:
        fragments.append("–¥–µ—Ä–∂–∏—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '–≤—ã'")

    if teasing_ratio >= 0.25:
        fragments.append("—á–∞—Å—Ç–æ –ø–æ–¥—à—É—á–∏–≤–∞–µ—Ç")
    elif stats.teasing == 0 and informal_ratio < 0.2:
        fragments.append("–æ–±—â–∞–µ—Ç—Å—è —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ")

    if not fragments:
        return None

    summary = f"–° {addressee_name} –æ–±—ã—á–Ω–æ {', '.join(fragments)}."

    sample_line = _pick_sample(stats.samples)
    if sample_line:
        summary += f" –ü—Ä–∏–º–µ—Ä: \"{sample_line}\""

    return summary


def _pick_sample(samples: Sequence[str]) -> Optional[str]:
    for text in samples[::-1]:
        trimmed = text.strip()
        if trimmed:
            return trimmed
    return None
